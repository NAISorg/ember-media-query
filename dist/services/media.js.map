{"version":3,"file":"media.js","sources":["../../src/services/media.js"],"sourcesContent":["import Service from '@ember/service';\nimport { TrackedObject } from 'tracked-built-ins';\nimport { tracked } from '@glimmer/tracking';\nimport { isTesting, macroCondition } from '@embroider/macros';\nimport { registerDestructor } from '@ember/destroyable';\n\n/* This comment is here because programming is awful\n * the release infrastructure requires a change to the\n * package dir via PR to trigger a release.\n */\n/**\n * @class Media\n * @extends Service\n */\nexport default class Media extends Service {\n  /**\n   * Mocked breakpoints for testing\n   * @type {string[]}\n   * @private\n   */\n  @tracked _mockedBreakpoints = ['desktop'];\n\n  /**\n   * Event listeners for each breakpoint\n   * @type {Record<string, Function>}\n   * @private\n   */\n  #listeners = {};\n\n  /**\n   * A hash of matchers by breakpoint name\n   * @type {TrackedObject<Record<string, MediaQueryList>>}\n   */\n  matchers = new TrackedObject({});\n\n  constructor() {\n    super(...arguments);\n    registerDestructor(this, this.#cleanupListeners.bind(this));\n  }\n\n  /**\n   *  Add media query matchers\n   *\n   *  ```javascript\n   *    media.match('mobile', '(max-width: 767px)');\n   *    media.match('desktop', '(min-width: 768px)');\n   *  ```\n   *\n   *  @param {string} breakpointName - The name of the matcher\n   *  @param {string} query - The media query to match against\n   */\n  match(breakpointName, query) {\n    if (macroCondition(isTesting())) {\n      this.matchers[breakpointName] = {\n        matches: this._mockedBreakpoints.includes(breakpointName),\n      };\n      return;\n    }\n\n    const matcher = window.matchMedia(query);\n\n    const listener = (matcher) => {\n      this.matchers[breakpointName] = matcher;\n    };\n\n    if (this.#listeners[breakpointName]) {\n      this.matchers[breakpointName].removeEventListener(\n        'change',\n        this.#listeners[breakpointName],\n      );\n    }\n\n    this.#listeners[breakpointName] = listener;\n\n    matcher.addEventListener('change', listener);\n\n    listener(matcher);\n  }\n\n  /**\n   * Set multiple breakpoints at once\n   * @param {Record<string, string>} breakpoints - An object with breakpoint names as keys and media queries as values\n   */\n  setBreakpoints(breakpoints) {\n    Object.keys(breakpoints).forEach((name) => {\n      this.match(name, breakpoints[name]);\n    });\n  }\n\n  /**\n   * Check if matcher(s) are matching, by name\n   * @param {string|string[]} breakpointNames - The name(s) of the breakpoint(s) to check\n   * @returns {boolean} - True if all specified breakpoints are matching\n   */\n  is(breakpointNames) {\n    const matches = (name) => {\n      if (!this.matchers[name]) {\n        throw new Error(\n          `Breakpoint \"${name}\" not defined on the media service`,\n        );\n      }\n      return this.matchers[name]?.matches;\n    };\n    if (Array.isArray(breakpointNames)) {\n      return breakpointNames.every(matches);\n    }\n    return matches(breakpointNames);\n  }\n\n  /**\n   * Returns a list of currently matching matchers\n   * @returns {string[]} - An array of matching breakpoint names\n   */\n  get matches() {\n    return Object.keys(this.matchers).filter(\n      (breakpointName) => this.matchers[breakpointName].matches,\n    );\n  }\n\n  /**\n   * Throws an error indicating that the method is not implemented\n   * @throws {Error} - Not implemented error\n   */\n  get classNames() {\n    throw new Error(\n      'Not implemented. Please see the README for ember-media-query',\n    );\n  }\n\n  /**\n   * Cleanup event listeners\n   * @private\n   */\n  #cleanupListeners() {\n    Object.entries(this.#listeners).forEach(([breakpointName, listener]) => {\n      this.matchers[breakpointName]?.removeEventListener('change', listener);\n    });\n  }\n}\n"],"names":["Media","Service","g","prototype","tracked","i","void 0","matchers","TrackedObject","constructor","arguments","registerDestructor","bind","match","breakpointName","query","macroCondition","isTesting","matches","_mockedBreakpoints","includes","matcher","window","matchMedia","listener","removeEventListener","addEventListener","setBreakpoints","breakpoints","Object","keys","forEach","name","is","breakpointNames","Error","Array","isArray","every","filter","classNames","#cleanupListeners","entries"],"mappings":"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"}